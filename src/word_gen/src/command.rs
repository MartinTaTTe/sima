use std::collections::BTreeMap;
use std::fs;
use std::path::Path;

use clap::{Arg, Command};

use crate::reader;

// Returns the map for the rules to be used when generating the language.
// save_rules: if true, saves these rules in './assets/local/rules.yaml', otherwise, does not save them.
pub fn get_rules(save_rules: bool) -> Result<BTreeMap<String, BTreeMap<String, u32>>, Box<dyn std::error::Error>> {
    // Tuple containing the file path and whether the file contains sample text or not.
    let path = get_path();

    // If the path was given as a sample text, instead of rules.
    if path.1 {
        // Generate rules based on the sample text.
        let text = fs::read_to_string(path.0)?;
        let rules = reader::rules_from_string(&text, 3);

        // Save the rules generated by the reader.
        if save_rules {
            let path = "./assets/local/rules.yaml";
            let writer = fs::File::create(path)?;
            serde_yaml::to_writer(writer, &rules)?;
        }

        return Ok(rules)
    }

    // Read and deserialize yaml file.
    let yaml = fs::File::open(path.0)?;
    let rules: BTreeMap<String, BTreeMap<String, u32>> = serde_yaml::from_reader(yaml)?;

    Ok(rules)
}

// Gets the path given as application argument and completes it if it only was the file name (not full path).
// Returns full path tupled with boolean for whether it was given as a sample text or not (given as path to rules instead).
fn get_path() -> (String, bool) {
    // Define command for file path.
    let cmd = Command::new("configuration")
    .arg(
        Arg::new("rules")
            .long("language-rules")
            .short('r')
            .value_name("YAML_FILE")
            .help("Sets the source file for language rules.")
            .required(false),
    )
    .arg(
        Arg::new("sample")
            .long("sample-text")
            .short('s')
            .value_name("TXT_FILE")
            .help("Sets the source file for sample text.")
            .required(false)
    )
    .arg_required_else_help(true)
    .get_matches();
    
    // Extract path from cmd line arg.
    let mut path = cmd.get_one::<String>("sample").unwrap_or({
        cmd.get_one::<String>("rules").unwrap_or(&String::from(""))
    }).to_owned();

    // Prepend correct paths if needed.
    if !path.contains("assets") {
        let p = format!(".\\assets\\examples\\{}", &path);
        if Path::new(&p).exists() {
            path.insert_str(0, ".\\assets\\examples\\");
        }
        else {
            path.insert_str(0, ".\\assets\\local\\");
        }
    }
    (path, cmd.contains_id("sample"))
}
